<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>
import kqcircuits.util.macro_prepare as macroprep
from importlib import reload
from kqcircuits.util.mask_generate import generate_mask
import kqcircuits.util.export_file as export_file
from kqcircuits.defaults import root_path
from kqcircuits.chips.junction_test2 import JunctionTest2
from kqcircuits.chips.chip_q_factor import QualityFactor
from kqcircuits.chips.chip_x_mons_direct_coupling import XMonsDirectCoupling

reload(macroprep)

"""
While running the code, please either use the breakpoints and debugger,
as otherwise the code will run in one piece. You could also comment out specific
parts of the code.
"""

"""
Preparing an empty layout:

layout : This variable helps to communicate with the cells and structures inside the layout.
layout_view : This variable helps to control the visual features inside KLayout Editor such as the zooming to a specific place.
cell_view : This variable helps to control the cell_view tab on the left side of the KLayout Editor such as selecting a specific cell as a top.

"""
(layout, layout_view, cell_view) = macroprep.prep_empty_layout()


"""
Defining our mask and creating a top_cell that would work as a container for the lower level cells inside it, called chips/pixels.
Every pixel that will be generated through mask generation will be added inside the top_cell
"""
version = 2
mask_name = "EXP"
top_cell = layout.create_cell("Mask {}".format(mask_name))
cell_view.cell_name = top_cell.name 


"""
with_gird : This variable controls the generation of the grid layer. As the grid generation may take long during runtime,
  it is wise to turn it off while working on other aspects of the mask.
  
exp_mask : This variables controls the exportation of the design and bitmap files that are generated during the runtime.
  It is wise to turn it off until mask is ready for the use of the fabrication as it may take long during the runtime
  for all the files to be exported.
"""
with_grid = False
exp_mask = False


"""
mask_layout is a representation of the pixels and their locations on the mask that will be generated.
The locations for different pixels can be arranged in different ways using this variable.
"""
mask_layout = [
["---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---"],
["---", "---", "---", "---", "---", "XC4", "XC4", "XC4", "QHG", "J05", "---", "---", "---", "---", "---"],
["---", "---", "---", "XC4", "XC4", "XC4", "XC4", "XC4", "QHG", "J05", "J05", "J05", "---", "---", "---"],
["---", "---", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "QHG", "XC1", "XC1", "XC1", "XC1", "---", "---"],
["---", "---", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "QHG", "XC1", "XC1", "XC1", "XC1", "---", "---"],
["---", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "QHG", "XC3", "XC3", "XC3", "XC3", "XC3", "---"],
["---", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "QHG", "XC3", "XC3", "XC3", "XC3", "XC3", "---"],
["---", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "QDG", "XC3", "XC3", "XC3", "XC3", "XC3", "---"],
["---", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "QDG", "XC3", "XC3", "XC3", "XC3", "XC3", "---"],
["---", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "QDG", "XC3", "XC3", "XC3", "XC3", "XC3", "---"],
["---", "---", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "QDG", "XC3", "XC3", "XC3", "XC3", "---", "---"],
["---", "---", "XC4", "XC4", "XC4", "XC4", "XC4", "XC4", "QDG", "XC3", "XC3", "XC3", "XC3", "---", "---"],
["---", "---", "---", "XC4", "XC4", "XC4", "XC4", "XC4", "QDG", "XC3", "XC3", "XC3", "---", "---", "---"],
["---", "---", "---", "---", "---", "XC4", "XC4", "XC4", "QDG", "XC3", "---", "---", "---", "---", "---"],
["---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---", "---"],
]


"""
We can generalize some specific parameters for the pixels that will be generated. For instance, 
mask_parameters_for_chip dictionary contains common aspects for the chips such as the name of the mask,
and whether the grid will be generated or not during runtime.

In the other example, it is used for creating common aspects for chips which belong to the same family.
"""
mask_parameters_for_chip = {
  "name_mask": mask_name,
  "name_copy": None,
  "with_grid": with_grid,
  }

parameters_qd = {
  "res_lengths": [4649.6,4743.3,4869.9,4962.9,5050.7,5138.7,5139.,5257.,5397.4,5516.8,5626.6,5736.2,5742.9,5888.7,6058.3,6202.5,6350.,6489.4],
  "type_coupler": ["square","square","square","plate","plate","plate","square","square","square","plate","plate","plate","square","square","square","square","plate","plate"],
  "l_fingers": [19.9,54.6,6.7,9.7,22.8,30.5,26.1,14.2,18.2,10.9,19.8,26.4,34.2,19.9,25.3,8.,15.8,22.2],
  "n_fingers": [4,2,2,4,4,4,4,4,2,4,4,4,4,4,2,2,4,4]
}

parameters_qh = {
  "res_lengths": [4727.6,4804.7,4884.3,4966.4,5051.2,5139.0,5229.2,5323.6,5421.4,5522.6,5627.6,5736.5,5848.9,5967.2,6090.1,6217.9,6351.0,6490.0],
  "type_coupler": ["plate","plate","plate","plate","plate","plate","plate","plate","plate","plate","plate","plate","plate","plate","plate","plate","plate","plate"],
  "l_fingers": [25.0,32.7,54.3,64.7,79.9,92.7,21.7,29.2,49.7,59.7,73.9,86.0,18.5,25.0,44.5,53.9,67.8,78.9],
  "n_fingers": [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
}


"""
mask_map_legend is the place where we create the cells that are used inside the mask layout. 
This dictionary will be used during the mask generation to put the created cells inside the top_cell.
"""
mask_map_legend = {  
  "J05" : JunctionTest2.create_cell(layout, {
        **mask_parameters_for_chip,
        "with_grid":False,
        "name_chip" : "J5",
        "pad_width" : 100,
        "junctions_horizontal": True,
  }),
  "QDG": QualityFactor.create_cell(layout, {
        **parameters_qd,
        **mask_parameters_for_chip,
        "name_chip": "QDG",
        "n_ab": 18*[0],
        "res_term": 18*["galvanic"],
        "res_beg" : 18*["galvanic"],
  }),
  "QHG": QualityFactor.create_cell(layout, {
        **parameters_qh,
        **mask_parameters_for_chip,
        "name_chip": "QHG",
        "n_ab": 18*[0],
        "res_term": 18*["galvanic"],
        "res_beg" : 18*["galvanic"],
  }),
  "XC1": XMonsDirectCoupling.create_cell(layout, {
        **mask_parameters_for_chip,
        "name_chip": "XC1",
        "qubit_spacing": 35, # um, 30 um between the qubit arms
        "arm_width_a": 24,
        "arm_width_b": 34,
  }),
  "XC2": XMonsDirectCoupling.create_cell(layout, {
        **mask_parameters_for_chip,
        "name_chip": "XC2",
        "qubit_spacing": 105, # um, 100 um between the qubit arms
        "arm_width_a": 24,
        "arm_width_b": 34, 
  }),
  "XC3": XMonsDirectCoupling.create_cell(layout, {
        **mask_parameters_for_chip,
        "name_chip": "XC3",
        "qubit_spacing": 10, # um, 5 um between the qubit arms
        "arm_width_a": 24,
        "arm_width_b": 34,
  }),
  "XC4": XMonsDirectCoupling.create_cell(layout, {
        **mask_parameters_for_chip,
        "name_chip": "XC4",
        "qubit_spacing": -8, # um, 3 um between the qubit arms
        "arm_width_a": 24,
        "arm_width_b": 66, # gap of 3 um around the center island
  }),
}
text_margin = mask_map_legend["QDG"].pcell_parameter("text_margin")

"""
generate_mask is the function that takes the top_cell and the pixels that need to be inserted inside the top_cell,
and does this operation in the shape that is described on the mask_layout. 
"""
maskextra_cell, label_cell = generate_mask(layout, top_cell, mask_name, mask_layout, mask_map_legend, text_margin)


"""
export_mask method takes the top_cell and exports the design file and the bitmap files
related to the mask to the specified path. It exports the design and bitmap files for both the mask and for the
all pixels inside the mask.
"""
if exp_mask:
  layout_view.max_hier()
  export_mask(root_path, top_cell, layout, layout_view, cell_view, mask_map_legend)
  cell_view.active().cell = layout.cell(top_cell.cell_index())
  layout_view.zoom_fit()


</text>
</klayout-macro>
