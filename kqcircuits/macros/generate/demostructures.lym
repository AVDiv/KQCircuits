<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Pixels library</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>Generate</group-name>
 <menu-path>edit_menu.my_group&gt;end("KQCircuits Library").end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>
from kqcircuits.defaults import default_layers
import kqcircuits.util.macro_prepare as macroprep
from kqcircuits.chips.chip_q_factor import QualityFactor
from kqcircuits.chips.junction_test import JunctionTest
from kqcircuits.chips.ab_crossings import AirbridgeCrossings
from kqcircuits.chips.stripes import Stripes

from importlib import reload

version = 1.0

reload(macroprep)
(layout, layout_view, cell_view) = macroprep.prep_empty_layout()

name = "DEMO"
dice_width = 200
top_cell = layout.create_cell("KQCircuit_Structures_Demo") # A new cell into the layout
cell_view.cell_name = top_cell.name     # Shows the new cell
with_grid = False


mask_parameters_for_chip = {
  "name_mask": name,
  "name_copy": None,
  "dice_width": dice_width,
  "with_grid": with_grid,
  "r": 100,
  }

parameters_qd = {
  "res_lengths": [4649.6,4743.3,4869.9,4962.9,5050.7,5138.7,5139.,5257.,5397.4,5516.8,5626.6,5736.2,5742.9,5888.7,6058.3,6202.5,6350.,6489.4],
  "type_coupler": ["square","square","square","plate","plate","plate","square","square","square","plate","plate","plate","square","square","square","square","plate","plate"],
  "l_fingers": [19.9,54.6,6.7,9.7,22.8,30.5,26.1,14.2,18.2,10.9,19.8,26.4,34.2,19.9,25.3,8.,15.8,22.2],
  "n_fingers": [4,2,2,4,4,4,4,4,2,4,4,4,4,4,2,2,4,4]
}


parameters_qs = {
  "res_lengths": [4649.6,4908.9,5208.5,5516.8,5848.9,6217.4],
  "type_coupler": ["square","square","square","plate","plate","plate"],
  "l_fingers": [19.9,7.3,15.2,10.9,18.5,23.6],
  "n_fingers": [4,4,2,4,4,4]
}

legend = {

  "AB1": AirbridgeCrossings.create_cell(layout, {
          **mask_parameters_for_chip,
          "name_chip": "AB1",
          "crossings": 1,
          "b_number": 5,
          }),          

  "AB2": AirbridgeCrossings.create_cell(layout, {
          **mask_parameters_for_chip,
          "name_chip": "AB2",
          "crossings": 10,
          "b_number" : 5,
          }), 

  "QSG": QualityFactor.create_cell(layout, {
          **mask_parameters_for_chip,
          "name_chip": "QSG",
          **parameters_qs,
          "n_ab": 6*[0],
          "res_term": 6*["galvanic"],
          "res_beg" : 6*["galvanic"],
  }),
  "QSA": QualityFactor.create_cell(layout, {
          **mask_parameters_for_chip,
          "name_chip": "QSA",
          **parameters_qs,
          "n_ab": 6*[0],
          "res_term": 6*["airbridge"],
          "res_beg" : 6*["galvanic"],
  }),
  "QSC": QualityFactor.create_cell(layout, {
          **mask_parameters_for_chip,
          "name_chip": "QSC",
          **parameters_qs,
          "n_ab": 6*[5],
          "res_term": 6*["galvanic"],
          "res_beg" : 6*["galvanic"],
  }),                   
  "QDG": QualityFactor.create_cell(layout, {
          **parameters_qd,
          **mask_parameters_for_chip,
          "name_chip": "QDG",
          "n_ab": 18*[0],
          "res_term": 18*["galvanic"],
          "res_beg" : 18*["galvanic"],
  }),
  "QDA": QualityFactor.create_cell(layout, {
          **mask_parameters_for_chip,
          **parameters_qd,
          "name_chip": "QDA",
          "n_ab": 18*[0],
          "res_term": 18*["airbridge"],
          "res_beg" : 18*["galvanic"],
  }),
  "QDC": QualityFactor.create_cell(layout, {
          **mask_parameters_for_chip,
          "name_chip": "QDC",
          **parameters_qd,
          "n_ab": 18*[5],
          "res_term": 18*["galvanic"],
          "res_beg" : 18*["galvanic"],
  }),
  "QDD": QualityFactor.create_cell(layout, {
          **mask_parameters_for_chip,
          "name_chip": "QDD",
          **parameters_qd,
          "n_ab": 18*[15],
          "res_term": 18*["galvanic"],
          "res_beg" : 18*["galvanic"],
  }),
  "J2" : JunctionTest.create_cell(layout, {
        **mask_parameters_for_chip,
        "with_grid":False,
        "name_chip" : "J2",
        "edge_len" : 80,
        "inter_space" : 20,
  }),
  "J3" : Stripes.create_cell(layout, {
        **mask_parameters_for_chip,
        "with_grid":False,
        "name_chip" : "J3",
        "edge_len" : 80,
        "inter_space" : 20,
  }),
  "J4" : Stripes.create_cell(layout, {
        **mask_parameters_for_chip,
        "with_grid":False,
        "name_chip" : "J4",
        "edge_len" : 80,
        "inter_space" : 20,
        "axis" : "Horizontal",
  }),
}

title_text = layout.create_cell("TEXT", "Basic", {
    "layer": default_layers["mask graphical rep"],
    "text": "IQM - STRUCTURES DEMO V{}".format(version),
    "mag": 5000,
  })


x, y, c = 0, 0, 0
for name, cell in legend.items():
  top_cell.insert(pya.DCellInstArray(legend[name].cell_index(),pya.DTrans(0, False, pya.DVector(x, y))))
  if c%5 == 4:
    y = y+12000
    x = 0
  else:
    x = x + 12000
  c = c + 1

top_cell.insert(pya.DCellInstArray(title_text.cell_index(), pya.DTrans(0, False, pya.DVector(-10000, y+15000)))) 


cell_view.active().cell = layout.cell(top_cell.cell_index())
layout_view.max_hier()
layout_view.zoom_fit()</text>
</klayout-macro>
