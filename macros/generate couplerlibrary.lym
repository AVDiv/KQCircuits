<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import numpy
from kqcircuit.defaults import default_layers
from kqcircuit.pcells.kqcircuit_pcell import get_refpoints
import kqcircuit.sonnet.parser as sonnet
import pprint


from importlib import reload
reload(sonnet)


# Create the layout
app = pya.Application.instance()
mw = app.main_window()
layout_view = mw.current_view()

# Do we have a view?
if layout_view == None:
  # Create a new view
  cell_view = mw.create_layout(1)
  layout = cell_view.layout()
  layout_view = mw.current_view()
else:
  # Use an active view
  cell_view = pya.CellView.active()
  layout = cell_view.layout()

# Delete all cells 
layout_view.clear_layers()

# Populate layers
def standard_layers():
  global default_layers
  global layout
  global l
  global layout_view
  l = {}
  for name, layer in default_layers.items():
    #print(name,type(layer))
    l[name] = layout.layer(layer)    
    
  layout_view.add_missing_layers()
 
standard_layers()


def prep_polygons(cell, simualtion_safety = 300):
  global layout  
  
  # Capacitor kappa
  cap = layout.create_cell("FingerCapS", "KQCircuit", {
    "finger_number": fingers,
    "finger_length": length,
    "finger_gap": 5,
    "finger_width": 15,
    "ground_padding": 10
#    "taper_length": (fingers*20-10)*0.2 # 22.5 degree taper
  })    
  #cap_inst = cell.insert(pya.DCellInstArray(cap.cell_index(), pya.DTrans(pya.DVector(0, 0))))
  cap_refpoints_abs = get_refpoints(layout.layer(default_layers["Annotations"]), cap)  
  
  bbox_temp = cap.dbbox_per_layer(layout.layer(default_layers["Optical lit. 1"]))
  bbox = bbox_temp.enlarge(0,simualtion_safety + (bbox_temp.height() % 2)/2 ) # also esnure summetry for 1 um grid
  bbox_top = bbox.enlarged(simualtion_safety,0)
  bbox_bottom = bbox.enlarged(simualtion_safety,0)
  bbox_top.p1 =  pya.DPoint(bbox_top.p1.x, cap.pcell_parameter("a")/2+cap.pcell_parameter("b") )
  bbox_bottom.p2 = pya.DPoint(bbox_bottom.p2.x, -cap.pcell_parameter("a")/2-cap.pcell_parameter("b") )
  
  region_pos = pya.Region(bbox.to_itype(layout.dbu))
  region_pos += pya.Region(bbox_top.to_itype(layout.dbu))+pya.Region(bbox_bottom.to_itype(layout.dbu))
  region_neg = pya.Region(cap.shapes(layout.layer(default_layers["Optical lit. 1"])))
  region = region_pos - region_neg 
      
  cell.shapes(layout.layer(default_layers["Optical lit. 1"])).insert(region)


  feedline_l = pya.DBox(
    pya.DPoint(bbox_top.p1.x,                  cap.pcell_parameter("a")/2 ),
    pya.DPoint(cap_refpoints_abs['port_a'].x, -cap.pcell_parameter("a")/2 ),
    )
  feedline_l_shape = cell.shapes(layout.layer(default_layers["Optical lit. 1"])).insert(feedline_l)
  feedline_l_shape.set_property('sonnet_port_nr', 1)
  feedline_l_shape.set_property('sonnet_port_edge', 0)
  feedline_r = pya.DBox(
    pya.DPoint(cap_refpoints_abs['port_b'].x,  cap.pcell_parameter("a")/2 ),
    pya.DPoint(bbox_top.p2.x,                 -cap.pcell_parameter("a")/2 ),
    )
  feedline_r_shape = cell.shapes(layout.layer(default_layers["Optical lit. 1"])).insert(feedline_r)
  feedline_r_shape.set_property('sonnet_port_nr', 2)
  feedline_r_shape.set_property('sonnet_port_edge', 2)

#sonnet_format = {}
#sonnet_format["poly_head"] = "{ilevel} {nvertices} {mtype} {filltype} {debugid} {xmin} {ymin} {xmax} {ymax} {conmax} {res} {res} {edge mesh}"

import os.path

batchstring = ""

for fingers in [6]:
  for length in range(0,201,10):
    simualtion_safety = 300
    name = "sim finger {}x{}".format(fingers, length)
    cell = layout.create_cell(name) # A new cell into the layout
    prep_polygons(cell, simualtion_safety)
    sonnet_strings = {
      "polygons": sonnet.polygons(cell.shapes(layout.layer(default_layers["Optical lit. 1"])), cell.dbbox().p1*(-1)),
      "box": sonnet.box_from_cell(cell, 1),
      "ports": sonnet.ports(cell.shapes(layout.layer(default_layers["Optical lit. 1"]))),
      "refpalnes": sonnet.refplanes(["LEFT","RIGHT"], simualtion_safety),
      "symmetry": sonnet.symmetry(False),
      "control": sonnet.control("ABS")
    }
    #pprint.pprint(sonnet_strings)
    
    # outputfiles into working directory
    filename = name+".son"
    sonnet.apply_template(
      os.path.join(os.path.dirname(os.path.abspath(sonnet.__file__)), "template.son"), 
      filename,
      sonnet_strings      
      )
    batchstring += "\"./{}\"\n".format(filename)

file = open("batch.txt","a") 
file.write(batchstring) 
file.close() 
   

layout_view.add_missing_layers()
layout_view.zoom_fit()
layout_view.max_hier()
#print(sys.version)
</text>
</klayout-macro>
