<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>QCD Standardd chip</description>
 <version>0.1</version>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>
edit_menu.my_group&gt;end("KQCircuit").end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya


#from kqcircuit.kqcircuit import KQCircuitLibrary

#import sys
#import inspect
#from importlib import reload
#reload(sys.modules[KQCircuitLibrary.__module__])
 
# Instantiate and register the library
#KQCircuitLibrary()

app = pya.Application.instance()
mw = app.main_window()
layout_view = mw.current_view()

# Do we have a view?
if layout_view == None:
  # Create a new view
  cell_view = mw.create_layout(1)
  layout = cell_view.layout()
  layout_view = mw.current_view()
else:
  # Use an active view
  cell_view = pya.CellView.active()
  layout = cell_view.layout()

#mw.create_view()
#cw = mw.create_layout(2)
#layout = cw.layout()
#print("Test", type(layout))


  

cell = layout.create_cell("Mask") # A new cell into the layout
cell_view.cell_name=cell.name     # Shows the new cell

# Add default layers
l1 = layout.layer(pya.LayerInfo(1,0,"Optical lit. 1"))
l2 = layout.layer(pya.LayerInfo(2,0,"Grid avoidance"))
l3 = layout.layer(pya.LayerInfo(3,0,"Electron beam lit. 1"))
l4 = layout.layer(pya.LayerInfo(4,0,"New guidelines"))

# Draw test structures on all layers
cell.shapes(l1).insert(pya.DBox(0, 0, 100, 200))
cell.shapes(l2).insert(pya.DBox(0, 0, 200, 100))
cell.shapes(l3).insert(pya.DBox(0, 0, -100, -200))

# Basic library

c1 = layout.create_cell("TEXT", "Basic", {
  "layer": layout.get_info(l2), 
  "text": "Test 44",
  "mag": 100.0
})

cell.insert(pya.DCellInstArray(c1.cell_index(), pya.DTrans(pya.DVector(0, -100))))

# Wiggly lines

points = []
n = 30
for x in range(0,n):
  points.append(pya.DPoint(x*30,5*n*math.sin(x/(n/3)*math.pi)))
for x in range(0,n):
  points.append(pya.DPoint(n*30-5*n*math.sin(x/(n/3)*math.pi),-x*30))
for x in range(0,n):
  points.append(pya.DPoint(n*30-x*30,-5*n*math.sin(x/(n/3)*math.pi)-n*30))
for x in range(0,n):
  points.append(pya.DPoint(5*n*math.sin(x/(n/3)*math.pi),x*30-n*30))
  
guideline = pya.DPath(points,5)

#c1 = layout.create_cell("Waveguide", "KQCircuit", {
#  "path": guideline
#})

#cell.insert(pya.DCellInstArray(c1.cell_index(), pya.DTrans(pya.DVector(200, -400))))

# Circles

def circle(n, step, offset, shift):
  points = []
  for x in range(0,n):
    points.append(pya.DPoint(200*math.cos((x*step+offset)*math.pi)-1000,200*math.sin((x*step+offset)*math.pi)-1000))
    
  guideline = pya.DPath(points,5)
  
  c1 = layout.create_cell("Waveguide", "KQCircuit", {
    "path": guideline
  })
    
  cell.insert(pya.DCellInstArray(c1.cell_index(), shift))


#circle(30, -1/10, 0, pya.DTrans(pya.DVector(0, 200)))
#circle(6, -1/2, 0, pya.DTrans(pya.DVector(0, -300)))
#circle(6, -1/2, 0.25, pya.DTrans(pya.DVector(0, -800)))
#circle(6, 1/2, 0.25, pya.DTrans(pya.DVector(0, -1200)))


layout_view.add_missing_layers()</text>
</klayout-macro>
