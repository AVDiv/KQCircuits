<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Demo Mask</description>
 <version>0.1</version>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>Generate</group-name>
 <menu-path>
edit_menu.my_group&gt;end("KQCircuit").end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import numpy
from kqcircuit.defaults import default_layers

# Create the layout
app = pya.Application.instance()
mw = app.main_window()
layout_view = mw.current_view()

# Do we have a view?
if layout_view == None:
  # Create a new view
  cell_view = mw.create_layout(1)
  layout = cell_view.layout()
  layout_view = mw.current_view()
else:
  # Use an active view
  cell_view = pya.CellView.active()
  layout = cell_view.layout()



# Top cell
cell = layout.create_cell("Test", "KQChip", {}) # A new cell into the layout
cell_view.cell_name=cell.name     # Shows the new cell

# Populate layers
def standard_layers():
  global default_layers
  global layout
  global l
  global layout_view
  l = {}
  for name, layer in default_layers.items():
    print(name,type(layer))
    l[name] = layout.layer(layer)    
    
  layout_view.add_missing_layers()

    
standard_layers()

protection = pya.Region(cell.begin_shapes_rec(layout.layer(default_layers["Grid avoidance"]))).merged()
cell.shapes(layout.layer(default_layers["Annotations"])).insert(protection)

def empty_regions(protection, box, deph=0, n = 3, debuglayer=-99):
  polygons=[]
  if deph&lt;0:
    return polygons
    
  
  grid_region = pya.Region(box)  
  overlaping_regions = grid_region.overlapping(protection)
  if (overlaping_regions.is_empty()):
    cell.shapes(debuglayer).insert(grid_region)
    return polygons
  else:      
    for x in numpy.linspace(box.p1.x, box.p2.x, n, endpoint=False):
      for y in numpy.linspace(box.p1.y, box.p2.y, n, endpoint=False):  
        subbox = pya.Box(pya.Point(x,y), pya.Point(x+box.width()/n,y+box.height()/n))
        empty_regions(protection, subbox,deph-1, n, debuglayer)
    
#fill_grid(pya.DBox(cell.bbox().p1*layout.dbu,cell.bbox().p2*layout.dbu),layout.layer(default_layers["Grid"]))

import time
if False:
  start = time.time()
  
  empty_regions(protection, pya.Box(cell.bbox().p1,cell.bbox().p2),
    deph=2,
    n=2,
    debuglayer=layout.layer(default_layers["Electron beam lit. 1"])
    )
  
  end = time.time()
  print(end - start)

if False:
  start = time.time()
  
  empty_regions(protection, pya.Box(cell.bbox().p1,cell.bbox().p2),
    deph=1,
    n=8,
    debuglayer=layout.layer(default_layers["Electron beam lit. 2"]))
  end = time.time()
  print(end - start)


from kqcircuit.groundgrid import make_grid
from importlib import reload
import sys
reload(sys.modules[make_grid.__module__])
      
grid_mag_factor = 1

if True:
  grid_area = pya.Box(cell.bbox().p1, cell.bbox().p2)
  protection = pya.Region(cell.begin_shapes_rec(layout.layer(default_layers["Grid avoidance"]))).merged()

  region_ground_grid = make_grid(grid_area, protection, grid_step = 10*(1/layout.dbu)*grid_mag_factor, grid_size = 5*(1/layout.dbu)*grid_mag_factor )

  cell.shapes(layout.layer(default_layers["Annotations"])).insert(protection)
  cell.shapes(layout.layer(default_layers["Grid"])).insert(region_ground_grid)

#protection = pya.Region(cell.begin_shapes_rec(layout.layer(default_layers["Grid avoidance"]))).merged()</text>
</klayout-macro>
