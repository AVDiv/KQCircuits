<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Simulation qubit</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>Generate</group-name>
 <menu-path>
edit_menu.my_group&gt;end("KQCircuit").end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import numpy
from kqcircuit.defaults import default_layers
from kqcircuit.pcells.kqcircuit_pcell import get_refpoints
import kqcircuit.sonnet.parser as sonnet
import pprint
import kqcircuit.sonnet.simgeom as simgeom 
import kqcircuit.macro_prepare as macroprep


from importlib import reload
reload(sonnet)
reload(simgeom)
#reload(kqcircuit.defaults)
reload(macroprep)

pprint.pprint(default_layers)


(layout, layout_view, cell_view) = macroprep.prep_empty_layout()


def produce_simulation_cell(cell):
  global layout  

  # Swissmon      
  swissmon = layout.create_cell("Swissmon", "KQCircuit", {
    "fluxline": False,
    "arm_width": [50,10,50,10],
    "gap_width": 70,
    "corner_r": 2,
    "cpl_length": [174,0,174],
    "cpl_width": [48,42,48],
    "cpl_gap": [90, 102, 90],
    "squid_name": "SIM1"    
  })  
    
  cell.insert(pya.DCellInstArray(swissmon.cell_index(), pya.DTrans()))
  
  swissmon_refpoints_abs = get_refpoints(layout.layer(default_layers["Annotations"]), swissmon)  
  print(swissmon_refpoints_abs)
  
  ports = []
  ports.append(simgeom.SidePort(1, swissmon_refpoints_abs['port_cplr0'], 'l'))
  ports.append(simgeom.SidePort(2, swissmon_refpoints_abs['port_cplr2'], 'r'))
  ports.append(simgeom.SidePort(3, swissmon_refpoints_abs['port_drive'], 'b', termination=10))  
  ports.append(simgeom.Port(4, swissmon_refpoints_abs['port_squid_a'], group="A"))  
  ports.append(simgeom.Port(4, swissmon_refpoints_abs['port_squid_b'], group="A"))
  calgroup = "CUPGRP \"A\"\nID 28\nGNDREF F\nTWTYPE FEED\nEND"
  return ports, calgroup
  
import os.path

batchstring = ""

## Produce
simualtion_safety = 300 # microns
name = "sim qubit"

cell = layout.create_cell(name) # A new cell into the layout
ports, calgroup = produce_simulation_cell(cell)

sonnet_strings = simgeom.add_sonnet_geometry(
  cell, 
  simualtion_safety = simualtion_safety, # microns
  ports = ports,
  calgroup = calgroup,
  grid_size = 1, # microns
  symmetry = False # top-bottom symmetry for sonnet 
) 
sonnet_strings["control"] = sonnet.control("ABS")

# outputfiles into working directory
filename = name+".son"
sonnet.apply_template(
  os.path.join(os.path.dirname(os.path.abspath(sonnet.__file__)), "template.son"), 
  filename,
  sonnet_strings      
  )
batchstring += "\"./{}\"\n".format(filename)


## Batch
file = open("batch.txt","w") 
file.write(batchstring) 
file.close() 


layout_view.add_missing_layers()
layout_view.zoom_fit()
layout_view.max_hier()
#print(sys.version)
</text>
</klayout-macro>
