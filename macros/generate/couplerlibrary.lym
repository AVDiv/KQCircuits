<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Simulation CouplerLib</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>Generate</group-name>
 <menu-path>
edit_menu.my_group&gt;end("KQCircuit").end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import numpy
from kqcircuit.defaults import default_layers
from kqcircuit.pcells.kqcircuit_pcell import get_refpoints
import kqcircuit.sonnet.parser as sonnet
import pprint
import kqcircuit.sonnet.simgeom as simgeom 
import kqcircuit.macro_prepare as macroprep


from importlib import reload
reload(sonnet)
reload(simgeom)
#reload(kqcircuit.defaults)
reload(macroprep)

pprint.pprint(default_layers)


(layout, layout_view, cell_view) = macroprep.prep_empty_layout()

def produce_simulation_cell(cell, fingers, length, gap, coupler_type = "square"):
  global layout  
  
  # Capacitor
  if (coupler_type=="plate"):    
    cap = layout.create_cell("FingerCapS", "KQCircuit", {
      "finger_number": fingers,
      "finger_length": 0,
      "finger_gap_end": length,
      "finger_gap_side": 0,
      "finger_width": 10,
      "ground_padding": 10,
#        "corner_r": 0
    })    
  elif (coupler_type=="square"):
    cap = layout.create_cell("FingerCapS", "KQCircuit", {
      "finger_number": fingers,
      "finger_length": length,
      "finger_gap_end": 5,
      "finger_gap_side": 5,
      "finger_width": 15,
      "ground_padding": 10
    })
  else:
    cap = layout.create_cell("FingerCapT", "KQCircuit", {
      "finger_number": fingers,
      "finger_length": length,
      "finger_gap": 5,
      "finger_width": 15,
      "ground_padding": 10,
      "taper_length": (fingers*20-5)/2. # 45 degree taper
    })
    
  cell.insert(pya.DCellInstArray(cap.cell_index(), pya.DTrans()))
  
  cap_refpoints_abs = get_refpoints(layout.layer(default_layers["Annotations"]), cap)  
  
  ports = []
  ports.append(simgeom.SidePort(1, cap_refpoints_abs['port_a'], 'l'))
  ports.append(simgeom.SidePort(2, cap_refpoints_abs['port_b'], 'r'))
    
  return ports
  

import os.path

batchstring = ""
tapertype = "plate"

for fingers in [4]:
  for length in range(10,101,10): # microns
#fingers = 6
#for tapertype in ["triangle","square"]:
#  for length in range{0,200,20}: # microns
#tapertype = "plate"
#for fingers in [3,4,5]:
#  for gap in range(5,51,5): # microns
    simualtion_safety = 300 # microns
    name = "sim cap {}x{}".format(fingers,length)
    
    cell = layout.create_cell(name) # A new cell into the layout
    ports = produce_simulation_cell(cell, fingers, length, 0, coupler_type=tapertype)
    
    sonnet_strings = simgeom.add_sonnet_geometry(
      cell, 
      simualtion_safety = simualtion_safety, # microns
      ports = ports,
      grid_size = 1, # microns
      symmetry = False # top-bottom symmetry for sonnet 
    ) 
    sonnet_strings["control"] = sonnet.control("ABS")
    pprint.pprint(sonnet_strings)
    
    # outputfiles into working directory
    filename = name+".son"
    sonnet.apply_template(
      os.path.join(os.path.dirname(os.path.abspath(sonnet.__file__)), "template.son"), 
      filename,
      sonnet_strings      
      )
    batchstring += "\"./{}\"\n".format(filename)

file = open("batch.txt","w") 
file.write(batchstring) 
file.close() 
   

layout_view.add_missing_layers()
layout_view.zoom_fit()
layout_view.max_hier()
#print(sys.version)
</text>
</klayout-macro>
