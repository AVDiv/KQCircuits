<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import kqcircuit.macro_prepare as macroprep
from kqcircuit.pcells.chips.chip_base import produce_label 
from kqcircuit.defaults import default_layers

from importlib import reload
reload(macroprep)
(layout, layout_view, cell_view) = macroprep.prep_empty_layout()

mask_name = "M001"
dice_width = 200
top_cell = layout.create_cell("Mask {}".format(mask_name)) # A new cell into the layout
cell_view.cell_name = top_cell.name     # Shows the new cell
with_grid = True

wafer_diam_inc = 6.
wafer_rad_um = wafer_diam_inc/2.*25400.
wafer_center = pya.DVector(wafer_rad_um-1200,-wafer_rad_um+1200)


box_map = {"A":[
  ["AB1","AB2","QSG"], 
  ["QSA","QSC","QDG"], 
  ["QDA","QDC","QDD"], 
]}

mask_map = [
  ["A","A","A","A","A"], 
  ["A","A","A","A","A"], 
  ["A","A","A","A","A"], 
  ["A","A","A","A","A"], 
  ["A","A","A","A","A"], 
]

mask_parameters_for_chip = {
  "name_mask": mask_name,
  "name_copy": None,
  "dice_width": dice_width,
  "with_grid": with_grid,
  "r": 100
  }

parameters_qd = {
  "res_lengths": [4649.6,4743.3,4869.9,4962.9,5050.7,5138.7,5139.,5257.,5397.4,5516.8,5626.6,5736.2,5742.9,5888.7,6058.3,6202.5,6350.,6489.4],
  "type_coupler": ["square","square","square","plate","plate","plate","square","square","square","plate","plate","plate","square","square","square","square","plate","plate"],
  "l_fingers": [19.9,54.6,6.7,9.7,22.8,30.5,26.1,14.2,18.2,10.9,19.8,26.4,34.2,19.9,25.3,8.,15.8,22.2],
  "n_fingers": [4,2,2,4,4,4,4,4,2,4,4,4,4,4,2,2,4,4]
}


parameters_qs = {
  "res_lengths": [4649.6,4908.9,5208.5,5516.8,5848.9,6217.4],
  "type_coupler": ["square","square","square","plate","plate","plate"],
  "l_fingers": [19.9,7.3,15.2,10.9,18.5,23.6],
  "n_fingers": [4,4,2,4,4,4]
}

mask_map_legend = {
  "AB1": layout.create_cell("ABCrossings", "KQChip", {
          **mask_parameters_for_chip,
          "name_chip": "AB1",
          "crossings": 1
          }),          
  "AB2": layout.create_cell("ABCrossings", "KQChip", {
          **mask_parameters_for_chip,
          "name_chip": "AB2",
          "crossings": 10}), 
  "QSG": layout.create_cell("Chip QFactor", "KQChip", {
          **mask_parameters_for_chip,
          "name_chip": "QSG",
          **parameters_qs,
          "n_ab": 6*[0],
          "res_term": 6*["galvanic"]
  }),
  "QSA": layout.create_cell("Chip QFactor", "KQChip", {
          **mask_parameters_for_chip,
          "name_chip": "QSA",
          **parameters_qs,
          "n_ab": 6*[0],
          "res_term": 6*["airbridge"]
  }),
  "QSC": layout.create_cell("Chip QFactor", "KQChip", {
          **mask_parameters_for_chip,
          "name_chip": "QSC",
          **parameters_qs,
          "n_ab": 6*[5],
          "res_term": 6*["galvanic"]
  }),                   
  "QDG": layout.create_cell("Chip QFactor", "KQChip", {
          **parameters_qd,
          **mask_parameters_for_chip,
          "name_chip": "QDG",
          "n_ab": 18*[0],
          "res_term": 18*["galvanic"]
  }),
  "QDA": layout.create_cell("Chip QFactor", "KQChip", {
          **mask_parameters_for_chip,
          **parameters_qd,
          "name_chip": "QDA",
          "n_ab": 18*[0],
          "res_term": 18*["airbridge"]
  }),
  "QDC": layout.create_cell("Chip QFactor", "KQChip", {
          **mask_parameters_for_chip,
          "name_chip": "QDC",
          **parameters_qd,
          "n_ab": 18*[5],
          "res_term": 18*["galvanic"]
  }),
  "QDD": layout.create_cell("Chip QFactor", "KQChip", {
          **mask_parameters_for_chip,
          "name_chip": "QDD",
          **parameters_qd,
          "n_ab": 18*[15],
          "res_term": 18*["galvanic"]
  }),
}

text_margin = mask_map_legend["AB1"].pcell_parameter("text_margin")

step_ver = pya.DVector(0,-1e4)
step_hor = pya.DVector(1e4,0)

label_cell = layout.create_cell("ChipLabels") # A new cell into the layout
def produce_label_wrap(i, j, loc):
  global dice_width, text_margin, default_layers
  produce_label(label_cell, pos_index_name(i, j), loc+pya.DVector(1e4, 0), "bottomright", 
                dice_width, text_margin, default_layers["Optical lit. 1"], default_layers["Grid avoidance"])
top_cell.insert(pya.DCellInstArray(label_cell.cell_index(),pya.DTrans()))

def pos_index_name(i, j):
  return chr(ord("A")+i)+("{:02d}".format(j))

for (k, brow) in enumerate(mask_map):
  for (l, box) in enumerate(brow):
    if box in box_map:
      for (i, row) in enumerate(box_map[box]):
        for (j, slot) in enumerate(row):
          if slot in mask_map_legend.keys():
            v = step_ver*(i+3*k+1)+step_hor*(j+3*l)
            if ((v-step_ver*0.5+step_hor*0.5-wafer_center).length()-wafer_rad_um &lt; -1e4): # center of the pixer 1 cm from the mask edge
              top_cell.insert(pya.DCellInstArray(mask_map_legend[slot].cell_index(), pya.DTrans(v))) 
              produce_label_wrap(i+3*k, j+3*l, v)



cell_mask_name = layout.create_cell("TEXT", "Basic", {
  "layer": default_layers["Optical lit. 1"], 
  "text": "QCD-"+mask_name,
  "mag": 5000.0
})
cell_mask_name_h = cell_mask_name.dbbox().height()
cell_mask_name_w = cell_mask_name.dbbox().width()
top_cell.insert(pya.DCellInstArray(cell_mask_name.cell_index(), pya.DTrans(wafer_center.x-cell_mask_name_w/2,-0.5e4-cell_mask_name_h/2)))

cell_mask_outline = layout.create_cell("CIRCLE", "Basic", {
  "l": default_layers["Optical lit. 1"], 
  "r": 1.e9,
  "n": 64
})
circle = pya.DTrans(wafer_center)*pya.DPath([pya.DPoint(math.cos(a/32*math.pi)*wafer_rad_um, math.sin(a/32*math.pi)*wafer_rad_um) for a in range(0,64+1)],100)
top_cell.shapes(layout.layer(default_layers["Annotations 2"])).insert(circle)

cell_marker = layout.create_cell("Marker", "KQCircuit", {"window": True})
x_min = 0
y_min = -15e4
x_max = 15e4
y_max = 0
marker_transes = [pya.DTrans(x_min+25e3, y_min+25e3)*pya.DTrans.R180,
  pya.DTrans(x_max-25e3, y_min+25e3)*pya.DTrans.R270,
  pya.DTrans(x_min+25e3, y_max-25e3)*pya.DTrans.R90,
  pya.DTrans(x_max-25e3, y_max-25e3)*pya.DTrans.R0]
for trans in marker_transes:
  top_cell.insert(pya.DCellInstArray(cell_marker.cell_index(), trans)) 


</text>
</klayout-macro>
