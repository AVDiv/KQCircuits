<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Tutorial for creating PCells</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Copyright (c) 2019-2020 IQM Finland Oy.
#
# All rights reserved. Confidential and proprietary.
#
# Distribution or reproduction of any information contained herein is prohibited without IQM Finland Oyâ€™s prior
# written permission.

from kqcircuits.pya_resolver import pya
import kqcircuits.util.macro_prepare as macroprep
from kqcircuits.elements.airbridge import Airbridge
from kqcircuits.chips.single_xmons import SingleXmons


"""
While running the code, please either use the breakpoints and debugger,
as otherwise the code will run piece. You could also comment out specific
parts of the code.
"""

"""
Preparing an empty layout:

layout : This variable helps to communicate with the cells and structures inside the layout.
layout_view : This variable helps to control the visual features inside KLayout Editor such as the zooming to a specific place.
cell_view : This variable helps to control the cell_view tab on the left side of the KLayout Editor such as selecting a specific cell as a top.

"""
(layout, layout_view, cell_view) = macroprep.prep_empty_layout()

"""
A top cell is a container that can contain other cells inside. It is the highest level container in KQCircuit structure.
"""
top_cell = layout.create_cell("EXM")

"""
This line shows us our top_cell in Editor.
"""
cell_view.cell_name = top_cell.name


"""
Creating an example basic cell in the layout:

For now, the cell we have created is generated inside the layout, but not a child of the top_cell.
"""
cell_ab_crossing = Airbridge.create(layout,
                                    bridge_length=4000,
                                    pad_extra=50,
                                    pad_width=600,
                                    pad_length=500,
                                    bridge_width=500,
                                    )
"""
Selecting the cell we have just created as a new top cell in the cell_view to be able to see it seperately.
"""
cell_view.active().cell = layout.cell(cell_ab_crossing.cell_index())
layout_view.zoom_fit()
layout_view.max_hier()


"""
Now we are able to see the basic cell we have created as a seperate structure. 
But it is still not a member of the top_cell we have defined. In order to put a cell inside another cell,
we have to insert it.

pya.DTrans() : We use this to give a particular location to the cell we insert in the coordinate system.
  It is also effective for various types of transformation for the inserted cell.

"""
dtrans = pya.DTrans(0, 0)
instarr = pya.DCellInstArray(cell_ab_crossing.cell_index(), dtrans)
top_cell.insert(instarr)


"""
Now the cell we have created is no longer an orphan cell, but a child of the top_cell.
How about if we create a new cell, but this time it will not be a basic structure that is consisted of
only shapes, but a cell that contains various types of other shapes and cells.
"""
xc = SingleXmons.create(layout,
        name_mask=top_cell.name,
        name_copy=None,
        with_grid=False,
        name_chip="XS1"
  )
cell_view.active().cell = layout.cell(xc.cell_index())
layout_view.zoom_fit()
layout_view.max_hier()


"""
Now we are able to see the cell we have created on the layout. To add it inside the top_cell, we have to
insert it. But before that let us try to insert the previous cell we have created inside the recent one.
"""
instarr = pya.DCellInstArray(cell_ab_crossing.cell_index(), dtrans)
xc.insert(instarr)


"""
Now we can see the previous cell is inserted inside the recent cell we have created.
Now let's try to add the cell inside the top_cell
"""
instarr = pya.DCellInstArray(xc.cell_index(), dtrans)
top_cell.insert(instarr)


</text>
</klayout-macro>
