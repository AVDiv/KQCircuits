<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Screenshot with options</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>file_menu.screenshot</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import math

class ScreenshotDialog(pya.QDialog):
  """Qt Dialog for exporting a layout screenshot with given width and height.

  Based on https://www.klayout.org/svn-public/klayout-resources/trunk/scripts/screenshot.lym from this comment:
  https://www.klayout.de/forum/discussion/1313/printing-images-from-klayout.
  """

  def __init__(self, parent):
    
    super().__init__(parent)
        
    self.setWindowTitle("Save Screenshot")
    layout = pya.QGridLayout(self)
    self.setLayout(layout)
    
    label = pya.QLabel(self)
    label.text = "Width"
    layout.addWidget(label, 0, 0, 1, 1)
    
    width = pya.QLineEdit(self)
    width.text = "1000"
    layout.addWidget(width, 0, 1, 1, 1)
    
    label = pya.QLabel(self)
    label.text = "Height"
    layout.addWidget(label, 1, 0, 1, 1)
    
    height = pya.QLineEdit(self)
    height.text = "1000"
    layout.addWidget(height, 1, 1, 1, 1)
    
    label = pya.QLabel(self)
    label.text = "or use resolution (um/pixel):"
    layout.addWidget(label, 0, 2, 1, 1)
      
    resolution = pya.QLineEdit.new(self)
    resolution.text = "1.0"
    layout.addWidget(resolution, 0, 3, 1, 1)
    
    res_compute = pya.QPushButton(self)
    res_compute.text = "Set Size"
    
    def set_size():
      try:
        view = parent.current_view()
        if not view:
          raise RuntimeError("No view open")
        res = float(resolution.text)
        factor = 1.0 / (res * view.viewport_trans().mag)
        width.text = str(math.floor(view.viewport_width()*factor + 0.5))
        height.text = str(math.floor(view.viewport_height()*factor + 0.5))
      except Exception as ex:
        pya.QMessageBox.critical(self, "Error", str(ex))
        
    res_compute.clicked = set_size
    layout.addWidget(res_compute, 0, 4, 1, 1)
    
    label = pya.QLabel(self)
    label.text = "File"
    layout.addWidget(label, 2, 0, 1, 1)
      
    filename = pya.QLineEdit(self)
    filename.text = "file.png"
    layout.addWidget(filename, 2, 1, 1, 3)
    
    browse = pya.QPushButton(self)
    browse.text = "..."
    layout.addWidget(browse, 2, 4, 1, 1)
    
    def choose_file():
        chosen_filename = pya.QFileDialog.getSaveFileName(self, "Choose file to save screenshot")
        if chosen_filename:
          filename.text = chosen_filename
        
    browse.clicked =  choose_file  
    
    cancel = pya.QPushButton(self)
    cancel.text = "Cancel"
    layout.addWidget(cancel, 4, 4, 1, 1)
    cancel.clicked = lambda: self.reject()
    
    save = pya.QPushButton(self)
    save.text = "Save"
    layout.addWidget(save, 4, 0, 1, 1)
    
    def save_screenshot():
      try:
        view = parent.current_view()
        if not view:
          raise RuntimeError("No view open")  
        view.save_image(filename.text, int(width.text), int(height.text))
        self.accept()
      except Exception as ex:
        pya.QMessageBox.critical(self, "Error", str(ex))
      
    save.clicked = save_screenshot
    
    layout.setRowStretch(3, 1)
    
    
dialog = ScreenshotDialog(pya.Application.instance().main_window())
dialog.exec_()</text>
</klayout-macro>
